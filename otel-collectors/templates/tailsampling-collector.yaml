{{- /* Tailsampling Collector Template */ -}}
{{- include "otel-collectors.runValidations" . -}}
{{- $name := "tailsampling" }}
{{- $collector := index .Values.collectors $name }}
{{- if and $collector.enabled (eq $collector.type "application") (eq $name "tailsampling") }}
{{- /* Merge collectorsCommon with individual collector settings */ -}}
{{- $mergedCollector := deepCopy $.Values.collectorsCommon | mustMergeOverwrite (deepCopy $collector) }}
{{- /* Get transform configuration for this collector */ -}}
{{- $transformConfig := dict }}
{{- if hasKey $.Values "applicationObservability" }}
{{- if hasKey $.Values.applicationObservability $name }}
{{- $transformConfig = index $.Values.applicationObservability $name "transform" }}
{{- end }}
{{- end }}
---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: {{ $.Release.Name }}-{{ $name }}
  namespace: {{ $.Values.global.namespace }}
  labels:
    {{- include "otel-collectors.labels" $ | nindent 4 }}
    component: {{ $name }}
    type: {{ $mergedCollector.type }}
spec:
  image: {{ $mergedCollector.image.repository }}:{{ $mergedCollector.image.tag }}
  {{- if gt ($mergedCollector.replicas | int) 1 }}
  replicas: {{ $mergedCollector.replicas }}
  {{- end }}
  resources:
    {{- toYaml $mergedCollector.resources | nindent 4 }}

  # Health Checks
  {{- if $.Values.healthChecks.livenessProbe.enabled }}
  livenessProbe:
    {{- toYaml (omit $.Values.healthChecks.livenessProbe "enabled") | nindent 4 }}
  {{- end }}
  {{- if $.Values.healthChecks.readinessProbe.enabled }}
  readinessProbe:
    {{- toYaml (omit $.Values.healthChecks.readinessProbe "enabled") | nindent 4 }}
  {{- end }}

  # Security Configuration
  podSecurityContext:
    {{- toYaml $.Values.security.podSecurityContext | nindent 4 }}
  securityContext:
    {{- toYaml $.Values.security.containerSecurityContext | nindent 4 }}
  
  # Host network setting
  hostNetwork: {{ $.Values.security.advanced.hostNetwork }}
  
  # Pod annotations for security profiles
  {{- if $.Values.security.advanced.annotations }}
  podAnnotations:
    {{- toYaml $.Values.security.advanced.annotations | nindent 4 }}
  {{- end }}
  
  # Volume mounts for read-only root filesystem
  volumeMounts:
    - name: tmp
      mountPath: /tmp
    - name: cache  
      mountPath: /cache
    - name: data
      mountPath: /var/lib/otelcol
  volumes:
    - name: tmp
      emptyDir:
        sizeLimit: 100Mi
    - name: cache
      emptyDir:
        sizeLimit: 100Mi  
    - name: data
      emptyDir:
        sizeLimit: 1Gi
  config:
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
    
    processors:
      {{- if has "memory_limiter" $collector.config.processors }}
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 25
      {{- end }}
      resource/add_collector_info:
        attributes:
        - key: cluster
          value: {{ $.Values.global.clusterName }}
          action: insert
        - key: collector.name
          value: "collector-{{ $name }}"
          action: insert
        - key: workloadName
          value: {{ $mergedCollector.config.workloadName | quote }}
          action: insert
      tail_sampling:
        decision_wait: {{ $mergedCollector.config.decisionWait }}
        num_traces: 50000
        expected_new_traces_per_sec: 10
        policies:
        {{- $tailsamplingConfig := index $.Values.applicationObservability "tailsampling" }}
        {{- if and $tailsamplingConfig.policies $tailsamplingConfig.policies.enabled $tailsamplingConfig.policies.list }}
        {{- range $tailsamplingConfig.policies.list }}
        - {{ . | toYaml | nindent 10 | trim }}
        {{- end }}
        {{- else }}
          - name: probabilistic-policy
            type: probabilistic
            probabilistic:
              sampling_percentage: {{ mul $mergedCollector.config.samplingRate 100 }}
        {{- end }}
      {{- if has "batch" $mergedCollector.config.processors }}
      batch:
        send_batch_size: 1000
        timeout: 10s
      {{- end }}
    
    exporters:
      {{- range $destName, $dest := $.Values.otlpDestinations }}
      {{- if $dest.enabled }}
      otlphttp/{{ $destName }}:
        endpoint: {{ $dest.endpoint }}
        auth:
          authenticator: basicauth/{{ $destName }}
      {{- end }}
      {{- end }}
    
    extensions:
      {{- range $destName, $dest := $.Values.otlpDestinations }}
      {{- if $dest.enabled }}
      basicauth/{{ $destName }}:
        client_auth:
          username: ${env:{{ upper $destName }}_USERNAME}
          password: ${env:{{ upper $destName }}_PASSWORD}
      {{- end }}
      {{- end }}
      health_check:
        endpoint: 0.0.0.0:13133
    
    service:
      extensions: [{{- $extensions := list -}}
      {{- range $destName, $dest := $.Values.otlpDestinations -}}
        {{- if $dest.enabled -}}
          {{- $extensions = append $extensions (printf "basicauth/%s" $destName) -}}
        {{- end -}}
      {{- end -}}
      {{- $extensions = append $extensions "health_check" -}}
      {{- join ", " $extensions }}]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resource/add_collector_info, tail_sampling, batch]
          exporters: [{{- $traceExporters := list -}}
          {{- range $destName, $dest := $.Values.otlpDestinations -}}
            {{- if and $dest.enabled (has "traces" $dest.signals) -}}
              {{- $traceExporters = append $traceExporters (printf "otlphttp/%s" $destName) -}}
            {{- end -}}
          {{- end -}}
          {{- join ", " $traceExporters }}]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resource/add_collector_info, batch]
          exporters: [{{- $logExporters := list -}}
          {{- range $destName, $dest := $.Values.otlpDestinations -}}
            {{- if and $dest.enabled (has "logs" $dest.signals) -}}
              {{- $logExporters = append $logExporters (printf "otlphttp/%s" $destName) -}}
            {{- end -}}
          {{- end -}}
          {{- join ", " $logExporters }}]
      telemetry:
        logs:
          level: INFO

  env:
  - name: CLUSTER_NAME
    value: {{ $.Values.global.clusterName }}
  - name: COLLECTOR_ENVIRONMENT
    value: {{ $.Values.global.environment }}
  {{- range $destName, $dest := $.Values.otlpDestinations }}
  {{- if $dest.enabled }}
  {{- $secretName := $dest.authSecretName | default (printf "%s-secret" $destName) }}
  {{- $usernameKey := $dest.usernameKey | default "username" }}
  {{- $passwordKey := $dest.passwordKey | default "password" }}
  - name: {{ upper $destName }}_USERNAME
    valueFrom:
      secretKeyRef:
        key: {{ $usernameKey | quote }}
        name: {{ $secretName }}
  - name: {{ upper $destName }}_PASSWORD
    valueFrom:
      secretKeyRef:
        key: {{ $passwordKey | quote }}
        name: {{ $secretName }}
  {{- end }}
  {{- end }}

  {{- if $mergedCollector.volumeMounts }}
  volumeMounts:
    {{- toYaml $mergedCollector.volumeMounts | nindent 2 }}
  {{- end }}
    
  {{- if $mergedCollector.volumes }}
  volumes:
    {{- toYaml $mergedCollector.volumes | nindent 2 }}
  {{- end }}

  mode: {{ $mergedCollector.mode }}
  serviceAccount: {{ $mergedCollector.serviceAccount }}
{{- end }}